geom_density(alpha = 0.5) +
labs(title = "Density of GRS2x_tedmp by T1D group",
x = "GRS2x_TM_R3 Score", y = "Density") +
theme_minimal()
ggplot(df_imputed, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_density(alpha = 0.5) +
labs(title = "Density of GRS2x_imputed_tedmp by T1D group",
x = "GRS2x_TM_R3 Score", y = "Density") +
theme_minimal()
ggplot(df, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_histogram(alpha = 0.6, bins = 20, position = "identity") +
labs(title = "Histogram of GRS2x_tedmp Scores by T1D group",
x = "GRS2x_TM_R3 Score", y = "Count") +
theme_minimal()
ggplot(df_imputed, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_histogram(alpha = 0.6, bins = 20, position = "identity") +
labs(title = "Histogram of GRS2x_imputed_tedmp Scores by T1Dgroup",
x = "GRS2x_TM_R3 Score", y = "Count") +
theme_minimal()
ggplot(df, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_histogram(aes(y = after_stat(density)), alpha = 0.6, bins = 20, position = "identity") +
geom_density(alpha = 0.4) +
labs(title = "Histogram + Density of GRS2x_tedmp by T1D",
x = "GRS2x_TM_R3 Score", y = "Density") +
theme_minimal()
ggplot(df_imputed, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_histogram(aes(y = after_stat(density)), alpha = 0.6, bins = 20, position = "identity") +
geom_density(alpha = 0.4) +
labs(title = "Histogram + Density of GRS2x_imputed_tedmp by T1D",
x = "GRS2x_TM_R3 Score", y = "Density") +
theme_minimal()
head(grs2)
grs2$ID <- as.character(grs2$ID)
library(dplyr)
library(ggplot2)
library(patchwork)
# ---------------- DATA PREP ----------------
# Merge grs2 scores into df and df_imputed
merged_df <- df %>% left_join(grs2, by = "ID")
merged_df_imputed <- df_imputed %>% left_join(grs2, by = "ID")
# Filter to keep only complete rows
df_clean <- merged_df %>%
dplyr::filter(!is.na(t1d), !is.na(GRS2x_TM_R3), !is.na(AA_PRS), !is.na(GRS2_1000G))
df_imputed_clean <- merged_df_imputed %>%
dplyr::filter(!is.na(t1d), !is.na(GRS2x_TM_R3), !is.na(AA_PRS), !is.na(GRS2_1000G))
# ---------------- FIND GLOBAL LIMITS ----------------
# Boxplot y-axis limits (all scores together)
ymin <- min(c(df_clean$AA_PRS, df_clean$GRS2_1000G,
merged_df$GRS2x_TM_R3, merged_df_imputed$GRS2x_TM_R3), na.rm = TRUE)
ymax <- max(c(df_clean$AA_PRS, df_clean$GRS2_1000G,
merged_df$GRS2x_TM_R3, merged_df_imputed$GRS2x_TM_R3), na.rm = TRUE)
# Density x-axis limits
xmin <- min(c(df_clean$AA_PRS, df_clean$GRS2_1000G,
merged_df$GRS2x_TM_R3, merged_df_imputed$GRS2x_TM_R3), na.rm = TRUE)
xmax <- max(c(df_clean$AA_PRS, df_clean$GRS2_1000G,
merged_df$GRS2x_TM_R3, merged_df_imputed$GRS2x_TM_R3), na.rm = TRUE)
# ---------------- PLOTTING HELPERS ----------------
# Boxplot helper with fixed y axis
plot_box <- function(df, score, title) {
ggplot(df, aes(x = t1d, y = {{ score }}, fill = t1d)) +
geom_boxplot() +
stat_summary(fun = median, geom = "text", aes(label = round(..y.., 2)),
position = position_nudge(y = 0.3), size = 3, color = "black") +
labs(title = title, x = "T1D status", y = "Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("skyblue", "coral")) +
coord_cartesian(ylim = c(ymin, ymax))
}
# Density plot helper with fixed x axis
plot_density <- function(df, score, title) {
ggplot(df, aes(x = {{ score }}, fill = t1d)) +
geom_density(alpha = 0.5) +
labs(title = title, x = "Score", y = "Density", fill = "T1D status") +
theme_minimal() +
scale_fill_manual(values = c("skyblue", "coral")) +
coord_cartesian(xlim = c(xmin, xmax))
}
# ---------------- BOXPLOTS ----------------
# First pair: AA_PRS and GRS2_1000G
box1 <- plot_box(df_clean, AA_PRS, "AA_PRS by T1D group")
box2 <- plot_box(df_clean, GRS2_1000G, "GRS2_1000G by T1D group")
# Second pair: GRS2x observed and imputed
box3 <- plot_box(merged_df, GRS2x_TM_R3, "GRS2x_TM_R3_tedmp (3 missing SNPs)")
box4 <- plot_box(merged_df_imputed, GRS2x_TM_R3, "GRS2x_TM_R3_tedmp (Imputed)")
# Combine boxplots into 2 figures
boxplot_figure1 <- box1 | box2 +
plot_annotation(title = "Boxplots: AA_PRS and GRS2_1000G",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
boxplot_figure2 <- box3 | box4 +
plot_annotation(title = "Boxplots: GRS2x (3 missing SNPs) vs (Imputed)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
# ---------------- DENSITY PLOTS ----------------
# First pair: AA_PRS and GRS2_1000G
d1 <- plot_density(df_clean, AA_PRS, "AA_PRS by T1D group")
d2 <- plot_density(df_clean, GRS2_1000G, "GRS2_1000G by T1D group")
# Second pair: GRS2x observed and imputed
d3 <- plot_density(merged_df, GRS2x_TM_R3, "GRS2x_TM_R3_tedmp (3 missing SNPs)")
d4 <- plot_density(merged_df_imputed, GRS2x_TM_R3, "GRS2x_TM_R3_tedmp (Imputed)")
# Combine density plots into 2 figures
density_figure1 <- d1 | d2 +
plot_annotation(title = "Density: AA_PRS and GRS2_1000G",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
density_figure2 <- d3 | d4 +
plot_annotation(title = "Density: GRS2x (3 missing SNPs) vs (Imputed)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
# ---------------- PRINT PLOTS ----------------
print(boxplot_figure1)
print(boxplot_figure2)
print(density_figure1)
print(density_figure2)
View(merged_df)
View(df)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(
root.dir = paste0(Sys.getenv("RKJCOLLAB"))) #setting up pathway
# Load libraries
library(tidyverse)
library(haven)
library(conflicted)
library(dplyr)
library(ggplot2)
library(patchwork)
library(openxlsx)
library(data.table)
library(GGally)
library(ggcorrplot)
library(ggpubr)
### .csv file created from log file
SNPs_logfile <- read.csv("Immunogenetics_T1D/genetics/teddy_r01/risk_scores/grs2x/snp_cluster_status_from_logfile.csv")
# Importing .pvar file and comparing for the quality of SNPs used.
SNPs_input_impute <- fread(
"Immunogenetics_T1D/genetics/teddy_r01/imputation/tm_r3_imp/exome_chip/hwe_in_all/imputed_clean_maf0_rsq0.3/chr_all_concat.pvar",
skip = "#CHROM"
)
# Fix the column name
setnames(SNPs_input_impute, "#CHROM", "CHROM")
# Phenotype file
pheno_raw <- read_sas("Immunogenetics_T1D/raw/teddy_r01/2025-03-05/rj_immuno_all_demo_masked.sas7bdat")
#GRS2x score file (with and without imputation)
prs_scores <- read.csv("Immunogenetics_T1D/genetics/teddy_r01/risk_scores/grs2x/score_results.csv")
prs_scores_imputed <- read.csv("Immunogenetics_T1D/genetics/teddy_r01/risk_scores/grs2x/score_results_imputed.csv")
#GRS2x_matprot file without imputation
GRS2x_matprot <- read.csv("Maternal_Protection/data/teddy/genetics/risk_scores/grs2x/tm_r3_imp/score_results.csv")%>%
rename(GRS2x_TM_R3_matprot = t1dgrs2.luckett25_total)
GRS2x_matprot$ID <- sub(".*_", "", GRS2x_matprot$IID)
#GRS2x_matprot file with imputation
GRS2x_matprot_imputed<-read.csv("Maternal_Protection/data/teddy/genetics/risk_scores/grs2x/tm_r3_imp/score_results_imputed.csv")%>%
rename(GRS2x_TM_R3_matprot = t1dgrs2.luckett25_total)
GRS2x_matprot_imputed$ID <- sub(".*_", "", GRS2x_matprot_imputed$IID)
head(SNPs_logfile)
nrow(SNPs_logfile)
sum(SNPs_logfile$Processed=="missing")
missing_snps <- SNPs_logfile %>%
dplyr::filter(Processed == "missing") %>%
select(CHR, POS, Cluster, Processed)
print(missing_snps)
head(SNPs_input_impute)
# See if the missing SNPs exist at all in SNPs_input_impute
missing_positions <- c(32644083)
SNPs_input_impute %>%
dplyr::filter(POS %in% missing_positions & CHROM == 6)
# Join to get Cluster info alongside INFO field
SNP_quality_check <- SNPs_logfile %>%
left_join(SNPs_input_impute, by = c("CHR" = "CHROM", "POS")) %>%
distinct(CHR, POS, .keep_all = TRUE) %>%
dplyr::filter(Processed== "processed")
# View quality info
head(SNP_quality_check[, c("CHR", "POS", "Cluster", "INFO")])
# Extract MAF and R2 from INFO column using regular expressions
SNP_quality_check <- SNP_quality_check %>%
mutate(
MAF_value = as.numeric(str_extract(INFO, "(?<=MAF=)[0-9.]+")),
R2_value  = as.numeric(str_extract(INFO, "(?<=R2=)[0-9.]+"))
)
# View summary stats
summary(SNP_quality_check$MAF_value)
summary(SNP_quality_check$R2_value)
# Or get exact min and max
min_MAF <- min(SNP_quality_check$MAF_value, na.rm = TRUE)
max_MAF <- max(SNP_quality_check$MAF_value, na.rm = TRUE)
min_R2 <- min(SNP_quality_check$R2_value, na.rm = TRUE)
max_R2 <- max(SNP_quality_check$R2_value, na.rm = TRUE)
cat("MAF range:", min_MAF, "to", max_MAF, "\n")
cat("R2  range:", min_R2, "to", max_R2, "\n")
# Table 1: All SNPs with their CHR, POS, Cluster, and MAF
MAF_table_all <- SNP_quality_check %>%
select(CHR, POS, Cluster, MAF_value) %>%
arrange(MAF_value)
# Print full MAF table
print(MAF_table_all)
# Table 2: Top 10 SNPs with lowest MAF
MAF_table_lowest10 <- MAF_table_all %>%
slice_min(MAF_value, n = 10)
# Print top 10 lowest MAF SNPs
cat("\nTop 10 SNPs with lowest MAF:\n")
print(MAF_table_lowest10)
# Table 3: All SNPs with their CHR, POS, Cluster, and R2
R2_table_all <- SNP_quality_check %>%
select(CHR, POS, Cluster, R2_value) %>%
arrange(R2_value)
# Print full MAF table
print(R2_table_all)
# Table 2: Top 10 SNPs with lowest MAF
R2_table_lowest10 <- R2_table_all %>%
slice_min(R2_value, n = 10)
# Print top 10 lowest MAF SNPs
cat("\nTop 10 SNPs with lowest R2:\n")
print(R2_table_lowest10)
# Detect "TYPED" and "IMPUTED" in INFO column
SNP_quality_check$Typed <- grepl("TYPED", SNP_quality_check$INFO)
SNP_quality_check$Imputed <- grepl("IMPUTED", SNP_quality_check$INFO)
# Select only CHR, POS, Cluster, Typed, and Imputed columns
summary_SNP_quality_check <- SNP_quality_check[, c("CHR", "POS", "Cluster", "Typed", "Imputed")]
# Print the summary
print(summary_SNP_quality_check)
# Print counts
cat("Number of Typed SNPs:", sum(SNP_quality_check$Typed), "\n")
cat("Number of Imputed SNPs:", sum(SNP_quality_check$Imputed), "\n")
head(pheno_raw)
colnames(pheno_raw)
#Subset phenotype file to IDs and t1d status
pheno<- pheno_raw %>%
select(ID= RJohnson_Immuno_anc_MaskID, t1d)
pheno$ID <- as.character(pheno$ID)
# Label t1d group
pheno <- pheno %>%
mutate(t1d= ifelse(t1d == 0, "control", "case"))
head(pheno)
head(prs_scores)
prs_scores <- prs_scores %>%
rename(GRS2x_TM_R3 = t1dgrs2.luckett25_total)
head(prs_scores)
head(prs_scores_imputed)
prs_scores_imputed <- prs_scores_imputed %>%
rename(GRS2x_TM_R3 = t1dgrs2.luckett25_total)
head(prs_scores_imputed)
prs_scores$ID <- sub(".*_", "", prs_scores$IID)
df <- left_join(prs_scores, pheno, by = "ID")
df <- df %>%
dplyr::filter(!is.na(GRS2x_TM_R3), !is.na(t1d))
dim(df)         # Check dimensions
colnames(df)    # See available columns
prs_scores_imputed$ID <- sub(".*_", "", prs_scores_imputed$IID)
df_imputed <- left_join(prs_scores_imputed, pheno, by = "ID")
df_imputed <- df_imputed %>%
dplyr::filter(!is.na(GRS2x_TM_R3), !is.na(t1d))
dim(df_imputed)         # Check dimensions
colnames(df_imputed)    # See available columns
# Prepare medians
medians <- df %>%
group_by(t1d) %>%
summarise(median_val = median(GRS2x_TM_R3, na.rm = TRUE))
# Plot with ggplot2
ggplot(df, aes(x = factor(t1d), y = GRS2x_TM_R3, fill = factor(t1d))) +
geom_boxplot() +
geom_text(data = medians, aes(x = factor(t1d), y = median_val, label = round(median_val, 3)),
vjust = -0.5, color = "black", size = 3.5) +
scale_fill_manual(values = c("lightblue", "lightcoral")) +
labs(title = "GRS2x by T1D Case/Control (teddy_immunoT1D)",
x = "T1D Status",
y = "GRS2x_TM_R3 Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "none")
# Prepare medians
medians <- df_imputed %>%
group_by(t1d) %>%
summarise(median_val = median(GRS2x_TM_R3, na.rm = TRUE))
# Plot with ggplot2
ggplot(df_imputed, aes(x = factor(t1d), y = GRS2x_TM_R3, fill = factor(t1d))) +
geom_boxplot() +
geom_text(data = medians, aes(x = factor(t1d), y = median_val, label = round(median_val, 3)),
vjust = -0.5, color = "black", size = 3.5) +
scale_fill_manual(values = c("lightblue", "lightcoral")) +
labs(title = "GRS2x_imputed by T1D Case/Control (teddy_immunoT1D)",
x = "T1D Status",
y = "GRS2x_TM_R3 Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 0.5),
legend.position = "none")
#GRS2x_matprot file without imputation
head(GRS2x_matprot)
#GRS2x_matprot file with imputation
head(GRS2x_matprot_imputed)
# Merge  scores into df and df_imputed
merged_df <- df %>% left_join(GRS2x_matprot, by = "ID")
merged_df_imputed <- df_imputed %>% left_join(GRS2x_matprot_imputed, by = "ID")
# Filter to keep only complete rows
df_clean <- merged_df %>%
dplyr::filter(!is.na(t1d), !is.na(GRS2x_TM_R3), !is.na(GRS2x_TM_R3_matprot))
head(df_clean)
df_imputed_clean <- merged_df_imputed %>%
dplyr::filter(!is.na(t1d), !is.na(GRS2x_TM_R3), !is.na(GRS2x_TM_R3_matprot))
head(df_imputed_clean)
# Boxplot helper
plot_box <- function(df, score, title) {
ggplot(df, aes(x = t1d, y = {{ score }}, fill = t1d)) +
geom_boxplot() +
stat_summary(fun = median, geom = "text", aes(label = round(..y.., 2)),
position = position_nudge(y = 0.3), size = 3, color = "black") +
labs(title = title, x = "T1D status", y = "Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("skyblue", "coral"))
}
# Density plot helper
plot_density <- function(df, score, title) {
ggplot(df, aes(x = {{ score }}, fill = t1d)) +
geom_density(alpha = 0.5) +
labs(title = title, x = "Score", y = "Density", fill = "T1D status") +
theme_minimal() +
scale_fill_manual(values = c("skyblue", "coral"))
}
# ----------- BOXPLOTS -----------
# First pair
box1 <- plot_box(df_clean, GRS2x_TM_R3, "GRS2x_teddyImmunoT1D (1 missing SNPs)")
box2 <- plot_box(df_clean, GRS2x_TM_R3_matprot, "GRS2x_teddyMatprot (3 missing SNP)")
# Second pair
box3 <- plot_box(df_imputed_clean , GRS2x_TM_R3, "GRS2x_teddyImmunoT1D (Imputed)")
box4 <- plot_box(df_imputed_clean , GRS2x_TM_R3_matprot, "GRS2x_teddyMatprot (Imputed)")
# Combine boxplots into 2 figures
boxplot_figure1 <- box1 | box2 +
plot_annotation(title = "teddyImmunoT1d vs teddyMatprot - GRS2x(before imputation)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
boxplot_figure2 <- box3 | box4 +
plot_annotation(title = "teddyImmunoT1d vs teddyMatprot - GRS2x(after imputation)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
# ----------- DENSITY PLOTS -----------
# First pair:
d1 <- plot_density(df_clean, GRS2x_TM_R3, "GRS2x_teddyImmunoT1D (1 missing SNPs)")
d2 <- plot_density(df_clean, GRS2x_TM_R3_matprot, "GRS2x_teddyMatprot (3 missing SNP)")
# Second pair:
d3 <- plot_density(df_imputed_clean , GRS2x_TM_R3, "GRS2x_teddyImmunoT1D (Imputed)")
d4 <- plot_density(df_imputed_clean , GRS2x_TM_R3_matprot, "GRS2x_teddyMatprot (Imputed)")
# Combine density plots into 2 figures
density_figure1 <- d1 | d2 +
plot_annotation(title = "teddyImmunoT1d vs teddyMatprot - GRS2x(before imputation)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
density_figure2 <- d3 | d4 +
plot_annotation(title = "teddyImmunoT1d vs teddyMatprot - GRS2x(after imputation)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
# ----------- PRINT PLOTS -----------
print(boxplot_figure1)
print(boxplot_figure2)
print(density_figure1)
print(density_figure2)
# Add 'dataset' and 'imputation' labels
prepare_data <- function(df, score_col, dataset_label, imputed_flag) {
df %>%
rename(GRS2x_score = !!sym(score_col)) %>%
mutate(
dataset = dataset_label,
imputed = imputed_flag
)
}
# Prepare each dataset
d1 <- prepare_data(GRS2x_matprot, "GRS2x_TM_R3_matprot", "matprot", FALSE)
d2 <- prepare_data(GRS2x_matprot_imputed, "GRS2x_TM_R3_matprot", "matprot", TRUE)
d3 <- prepare_data(prs_scores, "GRS2x_TM_R3", "immunoT1D", FALSE)
d4 <- prepare_data(prs_scores_imputed, "GRS2x_TM_R3", "immunoT1D", TRUE)
# Combine
combined <- bind_rows(d1, d2, d3, d4)
combined$dataset <- factor(combined$dataset, levels = c("matprot", "immunoT1D"))
# Filter for imputed data only
imputed_data <- combined %>% dplyr::filter(imputed == TRUE)
ggplot(imputed_data, aes(x = dataset, y = GRS2x_score, fill = dataset)) +
geom_boxplot(alpha = 0.7, width = 0.6) +
stat_summary(fun = median, geom = "text", aes(label = round(..y.., 2)),
vjust = -0.5, color = "black", size = 4) +
theme_minimal() +
labs(title = "GRS2x Scores (Imputed)", y = "GRS2x Score", x = "Dataset") +
theme(legend.position = "none")
non_imputed_data <- combined %>% dplyr::filter(imputed == FALSE)
ggplot(non_imputed_data, aes(x = dataset, y = GRS2x_score, fill = dataset)) +
geom_boxplot(alpha = 0.7, width = 0.6) +
stat_summary(fun = median, geom = "text", aes(label = round(..y.., 2)),
vjust = -0.5, color = "black", size = 4) +
theme_minimal() +
labs(title = "GRS2x Scores (Non-Imputed)", y = "GRS2x Score", x = "Dataset") +
theme(legend.position = "none")
ggplot(imputed_data, aes(x = GRS2x_score, fill = dataset, color = dataset)) +
geom_density(alpha = 0.3) +
theme_minimal() +
labs(title = "Density of GRS2x Scores (Imputed)", x = "GRS2x Score", y = "Density")
ggplot(non_imputed_data, aes(x = GRS2x_score, fill = dataset, color = dataset)) +
geom_density(alpha = 0.3) +
theme_minimal() +
labs(title = "Density of GRS2x Scores (Non-Imputed)", x = "GRS2x Score", y = "Density")
ggarrange(
# Boxplots
ggplot(non_imputed_data, aes(x = dataset, y = GRS2x_score, fill = dataset)) +
geom_boxplot(alpha = 0.7) +
stat_summary(fun = median, geom = "text", aes(label = round(..y.., 2)),
vjust = -0.5, color = "black", size = 4) +
theme_minimal() +
labs(title = "Boxplot - Non-Imputed") +
theme(legend.position = "none"),
ggplot(imputed_data, aes(x = dataset, y = GRS2x_score, fill = dataset)) +
geom_boxplot(alpha = 0.7) +
stat_summary(fun = median, geom = "text", aes(label = round(..y.., 2)),
vjust = -0.5, color = "black", size = 4) +
theme_minimal() +
labs(title = "Boxplot - Imputed") +
theme(legend.position = "none"),
ncol = 2
)
corr_df_matprot <- df %>%
select(ID, GRS2x_immuno_missing = GRS2x_TM_R3) %>%
left_join(df_imputed %>% select(ID, GRS2x_immuno_imputed = GRS2x_TM_R3), by = "ID") %>%
left_join(GRS2x_matprot %>% select(ID, GRS2x_matprot_missing = GRS2x_TM_R3_matprot), by = "ID") %>%
left_join(GRS2x_matprot_imputed %>% select(ID, GRS2x_matprot_imputed = GRS2x_TM_R3_matprot), by = "ID") %>%
dplyr::filter(complete.cases(.))
head(corr_df_matprot)
# --- Correlation matrix ---
cor_matrix <- cor(corr_df_matprot %>% select(-ID))
ggcorrplot(cor_matrix,
method = "circle",
type = "lower",
lab = TRUE,
title = "Correlation: GRS2x (immunoT1D vs matprot, missing SNPs vs imputed)",
colors = c("red", "white", "blue"),
lab_size = 4,
show.diag = TRUE)
# --- Pairwise scatterplots ---
ggpairs(corr_df_matprot %>% select(-ID),
title = "Pairwise Correlations and Scatter Plots (GRS2x: immunoT1D vs matprot, missing SNPs vs imputed)")
sessionInfo()
ggplot(df, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_histogram(alpha = 0.6, bins = 20, position = "identity") +
labs(title = "Histogram of GRS2x Scores by T1D group(teddy_immunoT1D)",
x = "GRS2x_TM_R3 Score", y = "Count") +
theme_minimal()
ggplot(df_imputed, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_histogram(alpha = 0.6, bins = 20, position = "identity") +
labs(title = "Histogram of GRS2x_imputed Scores by T1Dgroup(teddy_immunoT1D)",
x = "GRS2x_TM_R3 Score", y = "Count") +
theme_minimal()
ggplot(df, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_histogram(aes(y = after_stat(density)), alpha = 0.6, bins = 20, position = "identity") +
geom_density(alpha = 0.4) +
labs(title = "Histogram + Density of GRS2x by T1D (teddy_immunoT1D)",
x = "GRS2x_TM_R3 Score", y = "Density") +
theme_minimal()
ggplot(df_imputed, aes(x = GRS2x_TM_R3, fill = t1d)) +
geom_histogram(aes(y = after_stat(density)), alpha = 0.6, bins = 20, position = "identity") +
geom_density(alpha = 0.4) +
labs(title = "Histogram + Density of GRS2x_imputed by T1D (teddy_immunoT1D)",
x = "GRS2x_TM_R3 Score", y = "Density") +
theme_minimal()
# Boxplot helper
plot_box <- function(df, score, title) {
ggplot(df, aes(x = t1d, y = {{ score }}, fill = t1d)) +
geom_boxplot() +
stat_summary(fun = median, geom = "text", aes(label = round(..y.., 2)),
position = position_nudge(y = 0.3), size = 3, color = "black") +
labs(title = title, x = "T1D status", y = "Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("skyblue", "coral"))
}
# Density plot helper
plot_density <- function(df, score, title) {
ggplot(df, aes(x = {{ score }}, fill = t1d)) +
geom_density(alpha = 0.5) +
labs(title = title, x = "Score", y = "Density", fill = "T1D status") +
theme_minimal() +
scale_fill_manual(values = c("skyblue", "coral"))
}
# ----------- BOXPLOTS -----------
# First pair
box1 <- plot_box(df_clean, GRS2x_TM_R3, "GRS2x_teddyImmunoT1D (1 missing SNPs)")
box2 <- plot_box(df_clean, GRS2x_TM_R3_matprot, "GRS2x_teddyMatprot (3 missing SNP)")
# Second pair
box3 <- plot_box(df_imputed_clean , GRS2x_TM_R3, "GRS2x_teddyImmunoT1D (Imputed)")
box4 <- plot_box(df_imputed_clean , GRS2x_TM_R3_matprot, "GRS2x_teddyMatprot (Imputed)")
# Combine boxplots into 2 figures
boxplot_figure1 <- box1 | box2 +
plot_annotation(title = "teddyImmunoT1d vs teddyMatprot - GRS2x(before imputation)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
boxplot_figure2 <- box3 | box4 +
plot_annotation(title = "teddyImmunoT1d vs teddyMatprot - GRS2x(after imputation)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
# ----------- DENSITY PLOTS -----------
# First pair:
d1 <- plot_density(df_clean, GRS2x_TM_R3, "GRS2x_teddyImmunoT1D (1 missing SNPs)")
d2 <- plot_density(df_clean, GRS2x_TM_R3_matprot, "GRS2x_teddyMatprot (3 missing SNP)")
# Second pair:
d3 <- plot_density(df_imputed_clean , GRS2x_TM_R3, "GRS2x_teddyImmunoT1D (Imputed)")
d4 <- plot_density(df_imputed_clean , GRS2x_TM_R3_matprot, "GRS2x_teddyMatprot (Imputed)")
# Combine density plots into 2 figures
density_figure1 <- d1 | d2 +
plot_annotation(title = "teddyImmunoT1d vs teddyMatprot - GRS2x(before imputation)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
density_figure2 <- d3 | d4 +
plot_annotation(title = "teddyImmunoT1d vs teddyMatprot - GRS2x(after imputation)",
theme = theme(plot.title = element_text(size = 16, face = "bold")))
# ----------- PRINT PLOTS -----------
print(boxplot_figure1)
print(boxplot_figure2)
print(density_figure1)
print(density_figure2)
file.show("yourfile.Rmd", encoding = "UTF-8")
# If your Rmd is in the project root
file.show("connect.Rmd", encoding = "UTF-8")
getwd()   # Shows where R is looking for files
list.files()  # Lists files in current directory
setwd("C:/Users/venkatne/repos/lab-website-template")
getwd()   # Shows where R is looking for files
list.files()  # Lists files in current directory
# If your Rmd is in the project root
file.show("connect.Rmd", encoding = "UTF-8")
